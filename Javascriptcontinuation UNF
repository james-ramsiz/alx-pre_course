const express = require('express');
const { graphqlHTTP } = require('express-graphql');
const { buildSchema } = require('graphql');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const SECRET_KEY = 'your-secret-key-here';

// In-memory database
let products = [
  { id: '1', name: 'Laptop', price: 999.99, category: 'Electronics', stock: 10 },
  { id: '2', name: 'T-Shirt', price: 29.99, category: 'Apparel', stock: 50 },
];

let users = [
  { id: '1', email: 'admin@example.com', password: bcrypt.hashSync('admin123', 8), role: 'ADMIN' },
];

let carts = [];
let orders = [];

// GraphQL Schema
const schema = buildSchema(`
  type Query {
    products(category: String, search: String, sortBy: String): [Product!]!
    product(id: ID!): ProductResult!
    cart: Cart! @auth
    orderHistory: [Order!]! @auth
    userProfile: User! @auth
  }

  type Mutation {
    login(email: String!, password: String!): AuthPayload!
    register(email: String!, password: String!): AuthPayload!
    addToCart(productId: ID!, quantity: Int!): Cart! @auth
    removeFromCart(productId: ID!): Cart! @auth
    createOrder: OrderResult! @auth
    createProduct(name: String!, price: Float!, category: String!, stock: Int!): Product! @admin
    updateProductStock(id: ID!, stock: Int!): Product! @admin
  }

  type Product {
    id: ID!
    name: String!
    price: Float!
    category: String!
    stock: Int!
  }

  type User {
    id: ID!
    email: String!
    role: Role!
  }

  type Cart {
    items: [CartItem!]!
    total: Float!
  }

  type CartItem {
    product: Product!
    quantity: Int!
  }

  type Order {
    id: ID!
    items: [OrderItem!]!
    total: Float!
    status: OrderStatus!
    createdAt: String!
  }

  type OrderItem {
    product: Product!
    quantity: Int!
    priceAtPurchase: Float!
  }

  type AuthPayload {
    token: String!
    user: User!
  }

  enum Role {
    ADMIN
    CUSTOMER
  }

  enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
  }

  union ProductResult = Product | Error
  union OrderResult = Order | Error

  type Error {
    message: String!
    code: String!
  }
`);

// Resolvers
const root = {
  // Queries
  products: ({ category, search, sortBy }) => {
    let filtered = products;
    
    if (category) {
      filtered = filtered.filter(p => p.category === category);
    }
    
    if (search) {
      const searchTerm = search.toLowerCase();
      filtered = filtered.filter(p => 
        p.name.toLowerCase().includes(searchTerm)
      );
    }
    
    if (sortBy) {
      filtered.sort((a, b) => sortBy === 'PRICE_ASC' ? 
        a.price - b.price : b.price - a.price);
    }
    
    return filtered;
  },

  product: ({ id }) => {
    const product = products.find(p => p.id === id);
    return product || { 
      __typename: 'Error', 
      message: 'Product not found', 
      code: 'NOT_FOUND' 
    };
  },

  // Mutations
  login: ({ email, password }) => {
    const user = users.find(u => u.email === email);
    if (!user || !bcrypt.compareSync(password, user.password)) {
      throw new Error('Invalid credentials');
    }
    
    const token = jwt.sign(
      { userId: user.id, role: user.role },
      SECRET_KEY,
      { expiresIn: '1h' }
    );
    
    return { token, user };
  },

  addToCart: ({ productId, quantity }, context) => {
    const product = products.find(p => p.id === productId);
    if (!product || product.stock < quantity) {
      throw new Error('Product unavailable');
    }

    const cart = carts.find(c => c.userId === context.user.id) || 
      { userId: context.user.id, items: [] };
    
    const existingItem = cart.items.find(i => i.productId === productId);
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      cart.items.push({ productId, quantity });
    }
    
    carts = carts.filter(c => c.userId !== context.user.id).concat(cart);
    return getCartWithDetails(cart);
  },

  createOrder: (_, context) => {
    const cart = carts.find(c => c.userId === context.user.id);
    if (!cart || cart.items.length === 0) {
      return { __typename: 'Error', message: 'Cart is empty', code: 'EMPTY_CART' };
    }

    const order = {
      id: `ORD-${orders.length + 1}`,
      userId: context.user.id,
      items: cart.items.map(item => {
        const product = products.find(p => p.id === item.productId);
        product.stock -= item.quantity;
        return {
          productId: item.productId,
          quantity: item.quantity,
          priceAtPurchase: product.price
        };
      }),
      status: 'PENDING',
      createdAt: new Date().toISOString()
    };

    orders.push(order);
    carts = carts.filter(c => c.userId !== context.user.id);
    
    return order;
  },

  // Helper functions
  getCartWithDetails: (cart) => {
    return {
      items: cart.items.map(item => ({
        product: products.find(p => p.id === item.productId),
        quantity: item.quantity
      })),
      total: cart.items.reduce((sum, item) => {
        const product = products.find(p => p.id === item.productId);
        return sum + (product.price * item.quantity);
      }, 0)
    };
  }
};

// Authentication middleware
const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization?.replace('Bearer ', '');
  if (!token) return next();
  
  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    req.user = users.find(u => u.id === decoded.userId);
  } catch (error) {
    // Invalid token
  }
  next();
};

app.use(authMiddleware);

app.use('/graphql', graphqlHTTP((req) => ({
  schema: schema,
  rootValue: root,
  context: { user: req.user },
  graphiql: true
})));

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`GraphQL server running on port ${PORT}`));
